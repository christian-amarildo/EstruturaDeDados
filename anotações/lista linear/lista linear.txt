// Definição da estrutura para um item
Tipo TipoItem {
    inteiro valor
}


// Definição da estrutura para a lista
Tipo TipoLista {
    TipoItem item[maxtam]
    inteiro primeiro
    inteiro ultimo
}

------------------------------------------------------------------------------------------------------------


//Entrada: lista (uma instância de TipoLista)
//Saída: lista inicializada como uma lista vazia
//Pré-condição: lista é definida
//Pós-condição: lista é definida e vazia, com primeiro e ultimo apontando para o início da lista
//Vazia(lista):

// Inicializa uma lista vazia
Função FLVazia(lista: TipoLista) {
    lista.primeiro <- 0
    lista.ultimo <- lista.primeiro
}

------------------------------------------------------------------------------------------------------------


//Entrada: lista (uma instância de TipoLista)
//Saída: booleano (retorna true se a lista estiver vazia, caso contrário, retorna false)
//Pré-condição: lista é definida
//Pós-condição: lista não é modificada
//Insere(x, lista):

// Verifica se a lista está vazia
Função Vazia(lista: TipoLista) -> booleano {
    Retorne (lista.primeiro == lista.ultimo)
}

------------------------------------------------------------------------------------------------------------

//Entrada: x (um item de TipoItem), lista (uma instância de TipoLista)
//Saída: lista com x inserido após o último elemento
//Pré-condição: lista é definida e x é um item válido
//Pós-condição: lista é atualizada para incluir o novo item x, e ultimo é incrementado
//Retira(p, lista):

// Insere um item após o último elemento da lista
Função Insere(x: TipoItem, lista: TipoLista) {
    Se lista.ultimo >= maxtam Então
        Imprimir "Lista está cheia"
    Senão
        lista.item[lista.ultimo] <- x
        lista.ultimo <- lista.ultimo + 1
    Fim Se
}

------------------------------------------------------------------------------------------------------------


//Entrada: p (posição válida na lista), lista (uma instância de TipoLista)
//Saída: O item da lista na posição p
//Pré-condição: lista é definida e p é uma posição válida
//Pós-condição: A lista é atualizada para remover o item na posição p, e todos os itens subsequentes são deslocados para a esquerda. O item //removido é retornado.

// Remove e retorna o item na posição p da lista
Função Retira(p: inteiro, lista: TipoLista) -> TipoItem 
{
        // Verificação se a lista está vazia ou se a posição é inválida
    Se Vazia(lista) Ou p >= lista.ultimo Então
        Imprimir "Posição não existe"
        Retorne nulo
    Fim Se

    // Armazenamento do item na posição 'p'
    item <- lista.item[p]

    // Redução do tamanho da lista
    lista.ultimo <- lista.ultimo - 1

    // Desloca os itens para a esquerda a partir da posição 'p'
    Para i de p Até lista.ultimo - 1 Faça
        lista.item[i] <- lista.item[i + 1]
    Fim Para

    // Retorna o item removido
    Retorne item
}

------------------------------------------------------------------------------------------------------------

// Função Imprime - Exibe o conteúdo da lista com índice e valor
Função Imprime(Lista: TipoLista) {

    /*
    Explicação Detalhada:
    
    A função "Imprime" tem o objetivo de exibir os elementos da lista juntamente com seus
    respectivos índices. Cada elemento é mostrado no formato "índice - valor", onde:
    
    - 'Lista.primeiro': Representa o primeiro índice da lista (geralmente 0).
    - 'Lista.ultimo': Representa o índice logo após o último item da lista, ou seja, o tamanho da lista.

    Passos da função:

    1. **Exibição do Cabeçalho**:
        - Primeiramente, a função exibe um cabeçalho "p - key" para indicar que o índice (p) e
        o valor correspondente (key) serão mostrados.

    2. **Iteração pela Lista**:
        - Em seguida, a função percorre a lista do primeiro item até o último válido (que é 
        'Lista.ultimo - 1', já que 'Lista.ultimo' representa o próximo índice livre).
        - Para cada item, o índice atual e o valor associado a esse índice são exibidos.
    */

    // Exibe o cabeçalho "p - key"
    Exibir "Índice - Valor"

    // Itera do primeiro até o último elemento da lista
    Para aux de Lista.primeiro até Lista.ultimo - 1 faça:
        // Exibe o índice 'aux' e o valor associado a esse índice
        Exibir aux, "-", Lista.item[aux].valor
    FimPara

FimFunção

------------------------------------------------------------------------------------------------------------



