-----------------------------------------------------------------------------------------------------------
CODIGOS EM C++
-----------------------------------------------------------------------------------------------------------
Impelementação de Pilhas por
meio de Apontadores ou lista encadeada

#include <stdio.h>
#include <stdlib.h>

typedef int TipoChave;  // Define 'TipoChave' como um inteiro.

typedef struct {
    TipoChave chave;    // Campo 'chave' do tipo 'TipoChave'.
} TipoItem;             // Estrutura que representa o item armazenado na pilha.

typedef struct Celula *Apontador;  // Define 'Apontador' como um ponteiro para 'Celula'.

typedef struct Celula {
    TipoItem item;      // Item armazenado na célula.
    Apontador prox;     // Ponteiro para a próxima célula (nó) da pilha.
} Celula;               // Estrutura da célula que compõe a pilha.

typedef struct {
    Apontador topo;     // Ponteiro para o topo da pilha.
    Apontador fundo;    // Ponteiro para o fundo da pilha (célula base).
    int tamanho;        // Tamanho atual da pilha.
} TipoPilha;            // Estrutura que representa a pilha.




// Função que inicializa a pilha vazia.
void FPVazia(TipoPilha *pilha) {
    // Aloca memória para a célula cabeça.
    pilha->topo = (Apontador) malloc(sizeof(Celula));
    pilha->fundo = pilha->topo;        // 'fundo' aponta para a célula cabeça.
    pilha->topo->prox = NULL;          // Próximo do topo é NULL, indicando fim da pilha.
    pilha->tamanho = 0;                // Inicializa o tamanho da pilha com zero.
}




// Função que verifica se a pilha está vazia.
int vazia(TipoPilha *pilha) {
    // A pilha está vazia se o topo e o fundo apontam para a mesma célula.
    return (pilha->topo == pilha->fundo);
}




// Procedimento que empilha um item no topo da pilha.
void empilha(TipoItem x, TipoPilha *pilha) {
    Apontador aux;                               // Declara um ponteiro auxiliar.
    aux = (Apontador) malloc(sizeof(Celula));    // Aloca memória para a nova célula.
    aux->item = x;                               // Armazena o item 'x' na nova célula.
    aux->prox = pilha->topo;                     // Nova célula aponta para o topo atual.
    pilha->topo = aux;                           // Atualiza o topo para a nova célula.
    pilha->tamanho++;                            // Incrementa o tamanho da pilha.
}




// Função que desempilha o item do topo da pilha.
TipoItem desempilha(TipoPilha *pilha) {
    Apontador q;             // Ponteiro auxiliar para a célula a ser removida.
    TipoItem item;           // Variável para armazenar o item removido.

    // Verifica se a pilha está vazia.
    if (vazia(pilha)) {
        printf("Erro: pilha vazia\n");   // Mensagem de erro.
        item.chave = -1;                 // Valor indicador de erro.
        return item;                     // Retorna o item com chave inválida.
    } else {
        q = pilha->topo;                 // 'q' aponta para o topo atual.
        pilha->topo = q->prox;           // Atualiza o topo para o próximo elemento.
        item = q->item;                  // Copia o item da célula removida.
        free(q);                         // Libera a memória da célula removida.
        pilha->tamanho--;                // Decrementa o tamanho da pilha.
        return item;                     // Retorna o item removido.
    }
}




// Função que retorna o tamanho atual da pilha.
int tamanho(TipoPilha *pilha) {
    return pilha->tamanho;  // Retorna o campo 'tamanho' da estrutura da pilha.
}




// Programa de exemplo de uso da pilha.
int main() {
    TipoPilha pilha;
    TipoItem item;

    FPVazia(&pilha);  // Inicializa a pilha.

    // Empilha alguns itens.
    item.chave = 10;
    empilha(item, &pilha);

    item.chave = 20;
    empilha(item, &pilha);

    // Verifica o tamanho da pilha.
    printf("Tamanho da pilha: %d\n", tamanho(&pilha));

    // Desempilha um item.
    item = desempilha(&pilha);
    printf("Item desempilhado: %d\n", item.chave);

    // Verifica se a pilha está vazia.
    if (vazia(&pilha)) {
        printf("A pilha está vazia.\n");
    } else {
        printf("A pilha não está vazia.\n");
    }

    // Libera a célula cabeça restante.
    free(pilha.topo);

    return 0;
}






-----------------------------------------------------------------------------------------------------------
CODIGOS EM PSEUDOCODIGO
-----------------------------------------------------------------------------------------------------------

// Definição de tipos e estruturas

Tipo TipoChave é Inteiro  // Define 'TipoChave' como um inteiro.

Tipo TipoItem
    chave: TipoChave       // Campo 'chave' do tipo 'TipoChave'.
FimTipo

Tipo Apontador é Referência para Celula  // Define 'Apontador' como referência para 'Celula'.

Tipo Celula
    item: TipoItem         // Item armazenado na célula.
    prox: Apontador        // Referência para a próxima célula (nó) da pilha.
FimTipo

Tipo TipoPilha
    topo: Apontador        // Referência para o topo da pilha.
    fundo: Apontador       // Referência para o fundo da pilha (célula base).
    tamanho: Inteiro       // Tamanho atual da pilha.
FimTipo




// Procedimento que inicializa a pilha vazia.
Procedimento FPVazia(var pilha: TipoPilha)
    pilha.topo ← novo Celula       // Aloca memória para a célula cabeça.
    pilha.fundo ← pilha.topo       // 'fundo' aponta para a célula cabeça.
    pilha.topo.prox ← nulo         // Próximo do topo é nulo, indicando fim da pilha.
    pilha.tamanho ← 0              // Inicializa o tamanho da pilha com zero.
FimProcedimento

// Explicação:
// O procedimento `FPVazia` tem como objetivo inicializar a pilha para um estado vazio. A seguir, cada linha é detalhada:

1. **`pilha.topo ← novo Celula`**
   - **Descrição**: Aloca memória para uma nova célula que servirá como a célula cabeça (sentinela) da pilha.
   - **Significado**: A célula cabeça é um nó especial que não contém dados relevantes, mas facilita as operações na pilha, evitando a necessidade de tratar casos especiais quando a pilha está vazia.

2. **`pilha.fundo ← pilha.topo`**
   - **Descrição**: Configura o apontador `fundo` para apontar para a mesma célula que o `topo`.
   - **Significado**: Quando a pilha está vazia, tanto o `topo` quanto o `fundo` apontam para a célula cabeça, indicando que não há elementos na pilha além dela.

3. **`pilha.topo.prox ← nulo`**
   - **Descrição**: Define o campo `prox` da célula cabeça como `nulo`.
   - **Significado**: Isso indica que não há células após a célula cabeça, confirmando que a pilha está vazia.

4. **`pilha.tamanho ← 0`**
   - **Descrição**: Inicializa o tamanho da pilha com zero.
   - **Significado**: O campo `tamanho` mantém o controle do número de elementos na pilha. Ao iniciar com zero, estamos indicando que nenhum elemento (além da célula cabeça) foi empilhado.

**Resumo**:
- Este procedimento configura a estrutura da pilha para um estado inicial vazio.
- A utilização de uma célula cabeça simplifica as operações de empilhar e desempilhar, pois elimina a necessidade de verificar se a pilha está vazia em cada operação.
- Os apontadores `topo` e `fundo` apontando para a célula cabeça, juntamente com o `prox` sendo `nulo`, estabelecem a base para uma pilha pronta para uso.
- O tamanho zero reflete que não há elementos armazenados na pilha no momento da inicialização.






// Função que verifica se a pilha está vazia.
Função vazia(pilha: TipoPilha): Booleano
    retornar (pilha.topo = pilha.fundo)  // A pilha está vazia se topo e fundo são iguais.
FimFunção

// Explicação:
// A função `vazia` tem como objetivo verificar se a pilha está vazia.
// Ela recebe a pilha (`pilha: TipoPilha`) como parâmetro e retorna um valor booleano.

// Como funciona:
// - Compara o apontador `pilha.topo` com `pilha.fundo`.
// - Se ambos apontam para a mesma célula, significa que não há elementos na pilha além da célula cabeça (sentinela).
// - Retorna `verdadeiro` se a pilha estiver vazia, ou `falso` caso contrário.

// Importância:
// - Essa verificação é essencial para evitar operações inválidas, como tentar desempilhar de uma pilha vazia.
// - Garante a integridade das operações na pilha, permitindo que outras funções atuem de forma segura.

// Exemplo de uso:
// se vazia(pilha) então
//     escrever "A pilha está vazia."
// senão
//     escrever "A pilha contém elementos."
// fim se






// Procedimento que empilha um item no topo da pilha.
Procedimento empilha(x: TipoItem, var pilha: TipoPilha)
    var aux: Apontador                    // Declara um ponteiro auxiliar.
    aux ← novo Celula                     // Aloca memória para a nova célula.
    aux.item ← x                          // Armazena o item 'x' na nova célula.
    aux.prox ← pilha.topo                 // Nova célula aponta para o topo atual.
    pilha.topo ← aux                      // Atualiza o topo para a nova célula.
    pilha.tamanho ← pilha.tamanho + 1     // Incrementa o tamanho da pilha.
FimProcedimento

// Explicação:
// O procedimento `empilha` adiciona um novo item ao topo da pilha.
// Recebe como parâmetros o item a ser empilhado (`x: TipoItem`) e a pilha (`var pilha: TipoPilha`).

// Passo a passo:
// 1. **Declaração do ponteiro auxiliar**:
//    - `var aux: Apontador`
//    - Serve para criar uma nova célula que será inserida na pilha.

// 2. **Alocação de memória para a nova célula**:
//    - `aux ← novo Celula`
//    - Cria uma nova instância de `Celula` dinamicamente.

// 3. **Armazenamento do item na nova célula**:
//    - `aux.item ← x`
//    - O item a ser empilhado é colocado no campo `item` da nova célula.

// 4. **Ajuste do apontador `prox`**:
//    - `aux.prox ← pilha.topo`
//    - O campo `prox` da nova célula aponta para o antigo topo da pilha.
//    - Isso mantém a ligação entre os elementos da pilha.

// 5. **Atualização do topo da pilha**:
//    - `pilha.topo ← aux`
//    - O topo da pilha agora é a nova célula inserida.

// 6. **Incremento do tamanho da pilha**:
//    - `pilha.tamanho ← pilha.tamanho + 1`
//    - Atualiza o contador de elementos na pilha.







// Função que desempilha o item do topo da pilha.
Função desempilha(var pilha: TipoPilha): TipoItem
    var q: Apontador             // Ponteiro auxiliar para a célula a ser removida.
    var item: TipoItem           // Variável para armazenar o item removido.

    se vazia(pilha) então
        escrever "Erro: pilha vazia"   // Mensagem de erro.
        item.chave ← -1                // Valor indicador de erro.
        retornar item                  // Retorna o item com chave inválida.
    senão
        q ← pilha.topo                 // 'q' aponta para o topo atual.
        pilha.topo ← q.prox            // Atualiza o topo para o próximo elemento.
        item ← q.item                  // Copia o item da célula removida.
        liberar q                      // Libera a memória da célula removida.
        pilha.tamanho ← pilha.tamanho - 1  // Decrementa o tamanho da pilha.
        retornar item                  // Retorna o item removido.
    fim se
FimFunção

// Explicação:
// A função `desempilha` remove o item do topo da pilha e o retorna. Ela opera sobre a estrutura de dados da pilha, ajustando os apontadores e liberando a memória alocada para a célula removida.

// Passo a Passo:

1. **Declaração de Variáveis Auxiliares:**
   - `var q: Apontador`
     - Serve como ponteiro auxiliar para a célula que será removida.
   - `var item: TipoItem`
     - Armazena o item a ser removido da pilha.

2. **Verificação se a Pilha Está Vazia:**
   - `se vazia(pilha) então`
     - Antes de remover um item, a função verifica se a pilha está vazia utilizando a função `vazia`.
   - **Por quê?**
     - Desempilhar de uma pilha vazia é uma operação inválida e pode causar erros se tentarmos acessar memória que não foi alocada para um elemento.

3. **Tratamento de Erro para Pilha Vazia:**
   - `escrever "Erro: pilha vazia"`
     - Exibe uma mensagem de erro indicando que a pilha está vazia.
   - `item.chave ← -1`
     - Define um valor inválido para indicar que a operação de desempilhar falhou.
   - `retornar item`
     - Retorna um item com uma chave inválida para sinalizar que não houve remoção.

4. **Remoção do Topo da Pilha (Caso Não Esteja Vazia):**
   - `q ← pilha.topo`
     - O ponteiro `q` é usado para armazenar a referência da célula atual do topo da pilha.
   - `pilha.topo ← q.prox`
     - Atualiza o topo da pilha para apontar para o próximo elemento, removendo a referência ao elemento atual do topo.
     - Essencialmente, o topo da pilha "salta" para o próximo item, descartando o atual.
   - `item ← q.item`
     - Copia o item da célula que será removida para a variável `item`.
   - `liberar q`
     - Libera a memória alocada para a célula que foi removida.
     - É importante liberar a memória para evitar vazamentos de memória, uma vez que a célula não será mais usada.
   - `pilha.tamanho ← pilha.tamanho - 1`
     - Decrementa o tamanho da pilha, pois um elemento foi removido.

5. **Retorno do Item Removido:**
   - `retornar item`
     - Retorna o item removido para quem chamou a função, permitindo que seja utilizado ou processado.

**Conceitos Envolvidos:**

- **Desempilhamento (Pop):**
  - A operação de remover o item do topo da pilha.
  - É uma operação característica das pilhas, que segue a ordem LIFO (Last In, First Out).

- **Lista Encadeada:**
  - Neste contexto, a pilha é implementada como uma lista encadeada, onde cada elemento (nó) aponta para o próximo.
  - O topo da pilha sempre aponta para o último elemento inserido.

- **Gerenciamento de Memória Dinâmica:**
  - A função inclui a liberação de memória da célula removida para evitar vazamento de memória.
  - A memória é alocada dinamicamente ao empilhar e deve ser liberada ao desempilhar.

- **Tratamento de Erros:**
  - Verificar se a pilha está vazia antes de desempilhar previne operações inválidas.
  - Retornar um item com uma chave indicadora de erro (`-1` neste caso) permite que a função chamadora saiba que a operação falhou.




// Função que retorna o tamanho atual da pilha.
Função tamanho(pilha: TipoPilha): Inteiro
    retornar pilha.tamanho  // Retorna o campo 'tamanho' da estrutura da pilha.
FimFunção




// Programa principal para demonstração.
Algoritmo Principal
    var pilha: TipoPilha
    var item: TipoItem

    FPVazia(pilha)  // Inicializa a pilha.

    // Empilha alguns itens.
    item.chave ← 10
    empilha(item, pilha)

    item.chave ← 20
    empilha(item, pilha)

    // Verifica o tamanho da pilha.
    escrever "Tamanho da pilha: ", tamanho(pilha)

    // Desempilha um item.
    item ← desempilha(pilha)
    escrever "Item desempilhado: ", item.chave

    // Verifica se a pilha está vazia.
    se vazia(pilha) então
        escrever "A pilha está vazia."
    senão
        escrever "A pilha não está vazia."
    fim se

    // Libera a célula cabeça restante.
    liberar pilha.topo

FimAlgoritmo
