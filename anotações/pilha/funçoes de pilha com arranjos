-----------------------------------------------------------------------------------------------------------
CODIGOS EM C++
-----------------------------------------------------------------------------------------------------------
Operações sobre Pilhas Usando Arranjos

#include <stdio.h>

#define MAXTAM 1000  // Define o tamanho máximo da pilha.

typedef int TipoChave;  // Define 'TipoChave' como um inteiro.

typedef struct {
    TipoChave chave;  // Campo 'chave' do tipo 'TipoChave'.
} TipoItem;           // Estrutura que representa o item armazenado na pilha.

typedef struct {
    TipoItem item[MAXTAM];  // Array de itens que compõem a pilha.
    int topo;               // Índice que representa o topo da pilha.
} TipoPilha;                // Estrutura que representa a pilha.



// Função que inicializa a pilha vazia.
void FPVazia(TipoPilha *pilha) {
    pilha->topo = 0;  // Define o topo como 0, indicando que a pilha está vazia.
}



// Função que verifica se a pilha está vazia.
int vazia(TipoPilha *pilha) {
    return (pilha->topo == 0);  // Retorna verdadeiro se o topo for 0.
}



// Procedimento que empilha um item no topo da pilha.
void empilha(TipoItem x, TipoPilha *pilha) {
    if (pilha->topo == MAXTAM) {
        printf("Erro: pilha está cheia\n");  // Mensagem de erro se a pilha estiver cheia.
    } else {
        pilha->item[pilha->topo] = x;  // Insere o item no topo da pilha.
        pilha->topo++;                 // Incrementa o topo.
    }
}



// Função que desempilha o item do topo da pilha.
TipoItem desempilha(TipoPilha *pilha) {
    if (vazia(pilha)) {
        printf("Erro: a pilha está vazia\n");  // Mensagem de erro se a pilha estiver vazia.
        TipoItem itemVazio;
        itemVazio.chave = -1;  // Valor indicador de erro.
        return itemVazio;
    } else {
        pilha->topo--;                         // Decrementa o topo.
        return pilha->item[pilha->topo];       // Retorna o item do topo.
    }
}




// Função que retorna o tamanho atual da pilha.
int tamanho(TipoPilha *pilha) {
    return pilha->topo;  // Retorna o valor do topo, que indica o tamanho.
}




// Programa de exemplo de uso da pilha.
int main() {
    TipoPilha pilha;
    TipoItem item;

    FPVazia(&pilha);  // Inicializa a pilha.

    // Empilha alguns itens.
    item.chave = 10;
    empilha(item, &pilha);

    item.chave = 20;
    empilha(item, &pilha);

    // Verifica o tamanho da pilha.
    printf("Tamanho da pilha: %d\n", tamanho(&pilha));

    // Desempilha um item.
    item = desempilha(&pilha);
    printf("Item desempilhado: %d\n", item.chave);

    // Verifica se a pilha está vazia.
    if (vazia(&pilha)) {
        printf("A pilha está vazia.\n");
    } else {
        printf("A pilha não está vazia.\n");
    }

    return 0;
}









CODIGO EM PSEUDOCODIGO

-----------------------------------------------------------------------------------------------------------
PILHA COM ARRANJOS
-----------------------------------------------------------------------------------------------------------
// Definição de constantes e tipos
Constante MAXTAM = 1000  // Tamanho máximo da pilha

Tipo TipoChave é Inteiro  // Define 'TipoChave' como um inteiro

Tipo TipoItem
    chave: TipoChave      // Campo 'chave' do tipo 'TipoChave'
FimTipo

Tipo TipoPilha
    item: Vetor[0..MAXTAM - 1] de TipoItem  // Vetor que armazena os itens da pilha
    topo: Inteiro                           // Índice que representa o topo da pilha
FimTipo




// Procedimento que inicializa a pilha vazia
Procedimento FPVazia(var pilha: TipoPilha)
    pilha.topo ← 0  // Define o topo como 0, indicando que a pilha está vazia
FimProcedimento

// Explicação:
// O procedimento `FPVazia` inicializa a pilha para um estado vazio, configurando o topo como 0.
// Isso indica que a pilha está vazia e pronta para receber novos elementos.
// A pilha é implementada como um vetor (arranjo), onde `topo` representa o índice da próxima posição livre no vetor.
// Inicializando `topo` como 0, indicamos que não há elementos na pilha no momento.

// Funcionamento:
// - `pilha.topo ← 0`: Define a posição inicial para a inserção de elementos no vetor.

// Importância:
// - A inicialização é crucial para garantir que as operações subsequentes (empilhar e desempilhar) funcionem corretamente.
// - Definir `topo` como 0 estabelece a base para o controle do tamanho da pilha e sua integridade.

// Exemplo de uso:
// FPVazia(pilha)
// escrever "Pilha inicializada."




// Função que verifica se a pilha está vazia
Função vazia(pilha: TipoPilha): Booleano
    retornar (pilha.topo = 0)  // Retorna verdadeiro se o topo for 0
FimFunção

// Explicação:
// A função `vazia` verifica se a pilha não contém elementos, retornando um valor booleano.
// Ela faz isso comparando o valor do `topo` com 0.
// Se `topo` for 0, significa que nenhum elemento foi empilhado.

// Funcionamento:
// - `retornar (pilha.topo = 0)`:
//   - Retorna verdadeiro se `topo` for igual a 0, indicando que a pilha está vazia.
//   - Retorna falso se `topo` for diferente de 0, indicando que há elementos na pilha.

// Importância:
// - Saber se a pilha está vazia é fundamental para evitar operações inválidas, como tentar desempilhar quando não há elementos.
// - Ajuda a manter a integridade da pilha, prevenindo erros de execução.

// Exemplo de uso:
// se vazia(pilha) então
//     escrever "A pilha está vazia."
// senão
//     escrever "A pilha contém elementos."
// fim se




// Procedimento que empilha um item no topo da pilha
Procedimento empilha(x: TipoItem, var pilha: TipoPilha)
    se pilha.topo = MAXTAM então
        escrever "Erro: pilha está cheia"  // Mensagem de erro se a pilha estiver cheia
    senão
        pilha.item[pilha.topo] ← x         // Insere o item no topo da pilha
        pilha.topo ← pilha.topo + 1        // Incrementa o topo
    fim se
FimProcedimento

// Explicação:
// O procedimento `empilha` adiciona um novo item ao topo da pilha.
// A pilha é implementada usando um vetor, e `topo` indica a próxima posição livre para inserir o item.
// Antes de adicionar um novo item, verifica se a pilha está cheia.

// Passo a Passo:
// 1. **Verificação de Capacidade**:
//    - `se pilha.topo = MAXTAM então`
//    - Verifica se `topo` alcançou o limite máximo (`MAXTAM`), o que indica que a pilha está cheia.
//    - Se a pilha estiver cheia, exibe uma mensagem de erro e não adiciona o novo item.

// 2. **Inserção do Novo Item**:
//    - `pilha.item[pilha.topo] ← x`
//    - Insere o novo item na posição indicada por `topo`.
//    - Coloca o item na posição atual do vetor representando o topo da pilha.

// 3. **Atualização do Topo**:
//    - `pilha.topo ← pilha.topo + 1`
//    - Incrementa o `topo` para apontar para a próxima posição livre.
//    - Isso mantém a integridade da pilha, preparando-a para a próxima operação de empilhamento.

// Importância:
// - Garante que os itens sejam empilhados no topo e a ordem LIFO (Last In, First Out) da pilha seja mantida.
// - Evita a inserção além da capacidade máxima do vetor, protegendo a memória.

// Exemplo de uso:
// var item: TipoItem
// item.chave ← 42
// empilha(item, pilha)
// escrever "Item empilhado com sucesso."




// Função que desempilha o item do topo da pilha
Função desempilha(var pilha: TipoPilha): TipoItem
    se vazia(pilha) então
        escrever "Erro: a pilha está vazia"  // Mensagem de erro se a pilha estiver vazia
        itemVazio.chave ← -1                 // Valor indicador de erro
        retornar itemVazio
    senão
        pilha.topo ← pilha.topo - 1          // Decrementa o topo
        retornar pilha.item[pilha.topo]      // Retorna o item do topo
    fim se
FimFunção

// Explicação:
// A função `desempilha` remove o item do topo da pilha e o retorna.
// Ela decrementa o valor de `topo` para acessar o item no topo do vetor.
// Se a pilha estiver vazia, a função retorna um item com um valor inválido para indicar o erro.

// Passo a Passo:
// 1. **Verificação se a Pilha Está Vazia**:
//    - `se vazia(pilha) então`
//    - Usa a função `vazia` para verificar se a pilha contém elementos.
//    - Se estiver vazia, exibe uma mensagem de erro e define um valor inválido para retornar.

// 2. **Retorno de Erro para Pilha Vazia**:
//    - `itemVazio.chave ← -1`
//    - Retorna um item com chave inválida (`-1`) para sinalizar que a operação falhou porque a pilha estava vazia.

// 3. **Desempilhamento do Item**:
//    - `pilha.topo ← pilha.topo - 1`
//    - Decrementa o `topo` para apontar para o item atualmente no topo da pilha.
//    - Isso efetivamente "remove" o item do topo, pois o próximo empilhamento sobrescreverá essa posição.

// 4. **Retorno do Item Removido**:
//    - `retornar pilha.item[pilha.topo]`
//    - Retorna o item na posição atual do `topo`.
//    - Permite que a função chamadora acesse o valor do item que foi removido.

// Importância:
// - A função `desempilha` é essencial para manter a funcionalidade LIFO da pilha.
// - A verificação se a pilha está vazia antes de desempilhar evita operações inválidas.

// Exemplo de uso:
// var item: TipoItem
// item ← desempilha(pilha)
// se item.chave = -1 então
//     escrever "Erro ao desempilhar."
// senão
//     escrever "Item desempilhado com chave: ", item.chave
// fim se




// Função que retorna o tamanho atual da pilha
Função tamanho(pilha: TipoPilha): Inteiro
    retornar pilha.topo  // Retorna o valor do topo, que indica o tamanho
FimFunção

// Explicação:
// A função `tamanho` retorna o número de elementos atualmente na pilha.
// Como a pilha é implementada usando um vetor, o valor de `topo` representa o número de elementos armazenados.

// Funcionamento:
// - `retornar pilha.topo`:
//   - Retorna o valor atual de `topo`.
//   - Como `topo` é incrementado a cada operação de empilhamento e decrementado a cada desempilhamento,
//     ele reflete o número total de elementos na pilha.

// Importância:
// - A função `tamanho` permite que a função chamadora saiba quantos elementos estão na pilha a qualquer momento.
// - Isso é útil para controle de fluxo e para evitar operações que excedam os limites da pilha.

// Exemplo de uso:
// var tamanhoAtual: Inteiro
// tamanhoAtual ← tamanho(pilha)
// escrever "A pilha contém ", tamanhoAtual, " elementos."

